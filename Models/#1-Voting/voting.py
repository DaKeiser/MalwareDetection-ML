#!/usr/bin/env python
# coding: utf-8

# In[1]:

# IMporting necessary Packages

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# In[2]:

# Importing the csv's of the probabilities predicted by some best running models(which gave HIGH AUROC score)

# lgbm = pd.read_csv('../input/our-best-attempts/LGBM_0.71.csv')
easy_cat = pd.read_csv('../input/our-best-attempts/easy_ensemblecatboost_0.70.csv')
xg_cat = pd.read_csv('../input/our-best-attempts/xgboostsmote_9570.csv')
# bb = pd.read_csv('../input/ourbestattempts/balancedbaggingDTC_0.69.csv')
# easy_lgbm = pd.read_csv('../input/easy-ensemble-lgbm/preds_lgbm_ensemble_tuned_hyperparams.csv')
xg_new = pd.read_csv("../input/new-rep/test_model_probas_XGB (2).csv")
lg_new = pd.read_csv("../input/new-rep/test_model_probas_lgbmsmote.csv")
et_new = pd.read_csv("../input/new-rep/test_model_probas_ETC.csv")


# In[3]:

# Creating a new datframe concating the test predictions

voting_df = pd.DataFrame()
voting_df['MachineIdentifier'] = xg_new['MachineIdentifier']
voting_df['lg_new'] = lg_new['HasDetections']
voting_df['et_new'] = et_new['HasDetections']
voting_df['ec_70'] = easy_cat['HasDetections']
voting_df['xg_new'] = xg_new['HasDetections']
voting_df['xg_cat'] = xg_cat['HasDetections']
voting_df.head()


# In[4]:


voting_df.columns


# In[5]:


voting_df['ec_70']


# In[6]:

# Calculating the weighted average of the predictions

voting_df['HasDetections'] = (74*voting_df['lg_new']+70*voting_df['xg_cat']+65*voting_df['et_new']+75*voting_df['xg_new']+66*voting_df['ec_70'])/350


# In[7]:

# Checking the counts

voting_df[voting_df['HasDetections'] < 0.13]['MachineIdentifier'].count()


# In[8]:

# Checking the counts

voting_df[voting_df['HasDetections'] > 0.86]['MachineIdentifier'].count()


# In[9]:

# Checking the counts

print(voting_df.loc[voting_df['HasDetections'] < 0.13, 'HasDetections'],"\n------------------------------------")
print(voting_df.loc[voting_df['HasDetections'] > 0.86, 'HasDetections'])


# In[10]:

# Dropping the columns

voting_df.drop(columns=['lg_new', 'et_new', 'ec_70', 'xg_new', 'xg_cat'],inplace=True)
voting_df.head()


# In[11]:

# Creating a final test prediction column with weighted average predictions

voting_df.to_csv('voting_final_c_2.csv',index=False)

